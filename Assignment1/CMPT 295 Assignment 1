CMPT 295 Assignment 1
Professor: Brad Bart

Justin Liu
jzl1
301070053

1. Submitted.

2. an Emulator.

3.
	.globl times
mystery:
	movl	$0, %eax					// set eax to 0
	leaq	(%rdi, %rsi), %rcx			// (%rdi + %rsi) values set in %rcx 

loop:
	cmpq	%rdi, %rcx                  // %rcx - %rdi, set flag
	jle	endl                            // if %rcx - %rdi <= 0 go to endl
	decq	%rcx                        // %rcx - 1
	cmpb	$0x6f, (%rcx)               // %rcx - 0x6f, set flag. if char in str is a lower case o
	jne	loop                            // if %rcx - 0x6f is not equal to 0, then go back to loop
	incl	%eax                        // %eax + 1
	jmp	loop                            // go back to loop

endl:
	ret									// return

a)   n value 		 output
		0				0
		1				0
		2				1
		3				2
		4				2
		5				2
		6				2
		7				3
		8				4
		9				4
		10				4
		11				4
		12				5
		13				6
		14				6
		15				6
b) 
	mystery returns the number of lower case o's in str (first argument) from index 0 to n-1 for n>=1 (second argument).
c)
	%rcx is initially a value that is the address of str[n-1] for n >= 1 (where %rdi contains the address of str[0] and %rsi is n). Since a char is 1 byte long, incrementing an array by 1 effectively gives the address of the next char in str. Each iteration in the loop will check the index preceding it since each iteration reduces %rcx by 1, and using the new address attained after the decrement the line cmpb $0x6f,(%rcx) compares the value at the address to the value of a lower case o. Once the %rcx <= %rdi (when the loop has iterated n times), the loop terminates and the return is reached.
	d)
	The loop progresses backward through str. Each iteration decrements %rcx by 1 which is the address of previous index in the array str (as explained in part c). 

4.
a) submitted.

b) 
	.globl times
times:
	movl $0, %eax 		// set %eax = 0
	movq $0, %rcx		// set %rcx = 0 
	leaq (%esi),%rcx    // %esi value set in %rcx. This is the counter (argument b, the number of iterations of loop)
loop:
	cmpq $0, %rcx		// %rcx - 0, set flag (the condition of loop)
	jle endl			// if %rcx <= 0, the function times returns value in %eax, otherwise continue down the loop 
	decq %rcx			// %rcx decrement by 1 
	addl %edi,%eax 		// add %edi (argument a) to %eax
	jmp loop 			// go back to loop
endl:
	ret 				// return value in %eax

The algorthm used to perform the multiplication is done by adding argument a (%edi) argument b (%esi) times into %eax. This is done by first setting %eax and %rcx (the counter which is initialized as the value of argument b) to 0, and setting %rcx equal to argument b. The loop starts by checking the counter to see it is greater than 0, and if so will decrement the counter by 1 and add the value of argument a into the register containing the return value (%eax), and restart the loop. This will repeat until %rcx = 0 (which will be after argument b iterations). If the counter (%rcx) is equal to 0, return %eax.
Essentially, the algorithm is equivalent to a x b = a + a + a +....+ a, where a + a is done b times.

c) did not complete bonus.